>>> stock_financial_abstract_ths_df = ak.stock_financial_abstract_ths(symbol="600519", indicator="按报告期")
>>> 
>>> 
>>> 
>>> print(stock_financial_abstract_ths_df)
           报告期      净利润 净利润同比增长率    扣非净利润 扣非净利润同比增长率     营业总收入 营业总收入同比增长率   基本每股收益   每股净资产 每股资本公积金 每股未分配利润  ...  净资产收益率 净资产收益率-摊薄     营业周期 存货周转率   存货周转天数 应收账款周转天数  流动比率  速动比率 保守速动比率  产权比率   资产负债率
0   2024-03-31  240.65亿   15.73%  240.51亿     15.75%   464.85亿     18.04%  19.1600  190.84    1.09  156.86  ...  10.57%    10.04%  1241.51  0.07  1241.38     0.13  6.48  5.20   2.14  0.15  12.95%
1   2023-12-31  747.34亿   19.16%  747.53亿     19.05%  1505.60亿     18.04%  59.4900  171.68    1.09  137.70  ...  34.19%    34.65%  1293.20  0.28  1293.10     0.10  4.62  3.67   1.43  0.23  17.98%
2   2023-09-30  528.76亿   19.09%  528.16亿     18.97%  1053.16亿     17.30%  42.0900  173.39    1.09  143.39  ...  24.82%    24.28%  1258.35  0.21  1258.15     0.20  5.96  4.84   2.03  0.17  14.14%
3   2023-06-30  359.80亿   20.76%  359.47亿     20.78%   709.87亿     19.42%  28.6400  159.94    1.09  129.94  ...  16.70%    17.91%  1257.05  0.14  1256.98     0.07  6.35  5.07   2.22  0.16  13.39%
4   2023-03-31  207.95亿   20.59%  207.78亿     20.50%   393.79亿     18.66%  16.5500  173.76    1.09  144.94  ...  10.00%     9.53%  1236.36  0.07  1236.26     0.09  6.94  5.66   2.31  0.15  12.36%
..         ...      ...      ...      ...        ...       ...        ...      ...     ...     ...     ...  ...     ...       ...      ...   ...      ...      ...   ...   ...    ...   ...     ...
89  2001-12-31    3.28亿   31.55%    3.35亿      False    16.18亿     45.25%   1.5900   10.12    8.16    0.31  ...  26.79%    12.97%   823.40  0.44   813.01    10.39  3.10  2.25   2.28  0.37  26.73%
90  2001-06-30    2.23亿    False    False      False     8.74亿      False   1.2100    3.04    0.50    0.97  ...  40.16%    39.78%   677.03  0.27   668.40     8.63  1.57  0.67   0.77  1.14  52.90%
91  2000-12-31    2.50亿   15.70%    False      False    11.14亿     25.05%    False    2.39    0.48    0.58  ...  68.44%    56.41%   855.51  0.42   855.51    False  1.30  0.66   0.64  1.85  64.90%
92  1999-12-31    2.16亿   46.84%    False      False     8.91亿     41.81%   1.1700    1.54    0.48    0.03  ...  69.76%    75.57%  1031.52  0.35  1031.52    False  1.14  0.46   0.47  2.21  68.81%
93  1998-12-31    1.47亿    False    False      False     6.28亿      False    False   False   False   False  ...  54.27%    68.12%  1485.76  0.24  1485.76    False  1.16  0.43   0.43  2.17  68.44%

[94 rows x 25 columns]
>>> print(stock_financial_abstract_ths_df.head(1))
          报告期      净利润 净利润同比增长率    扣非净利润 扣非净利润同比增长率    营业总收入 营业总收入同比增长率   基本每股收益   每股净资产 每股资本公积金 每股未分配利润  ...  净资产收益率 净资产收益率-摊薄     营业周期 存货周转率   存货周转天数 应收账款周转天数  流动比率  速动比率 保守速动比率  产权比率   资产负债率
0  2024-03-31  240.65亿   15.73%  240.51亿     15.75%  464.85亿     18.04%  19.1600  190.84    1.09  156.86  ...  10.57%    10.04%  1241.51  0.07  1241.38     0.13  6.48  5.20   2.14  0.15  12.95%

[1 rows x 25 columns]
>>> 
>>> 
>>> 
>>> print(stock_financial_abstract_ths_df[['资产负债率']].head(1))
    资产负债率
0  12.95%
>>> 
>>> 
>>> 
>>> first_row_debt_ratio = stock_financial_abstract_ths_df.at[0, '资产负债率']
>>> 
>>> 
>>> print(first_row_debt_ratio)
12.95%
>>> stock_financial_abstract_ths_df = ak.stock_financial_abstract_ths(symbol="600519", indicator="按年度")
>>> 
>>> 
>>> 
>>> 
>>> first_row_debt_ratio = stock_financial_abstract_ths_df.at[0, '资产负债率']
>>> print(first_row_debt_ratio)
17.98%
>>> 
>>> 
>>> 
>>> a = ak.stock_financial_analysis_indicator(symbol="603444",start_year="2020")
>>> print(a)                                                                                                                                                                                        
            日期  摊薄每股收益(元)  加权每股收益(元)  每股收益_调整后(元)  扣除非经常性损益后的每股收益(元)  每股净资产_调整前(元)  ...  2-3年以内预付货款(元)  3年以内预付货款(元)  1年以内其它应收款(元)  1-2年以内其它应收款(元)  2-3年以内其它应收款(元)  3年以内其它应收款(元)
0   2020-03-31     5.8351       4.49         4.50                NaN       53.7101  ...            NaN          NaN           NaN             NaN             NaN           NaN
1   2020-06-30    10.0517        NaN         7.67               6.95       50.6428  ...       33927.85          NaN           NaN      5777437.09      5435268.06           NaN
2   2020-09-30    13.8643        NaN        11.07                NaN       54.3554  ...            NaN          NaN           NaN             NaN             NaN           NaN
3   2020-12-31    18.5283        NaN        14.58              12.53       59.1069  ...       27378.92          NaN           NaN     14389231.37      6604288.16           NaN
4   2021-03-31     6.1696       5.08         5.08                NaN       65.4537  ...            NaN          NaN           NaN             NaN             NaN           NaN
5   2021-06-30    14.6469        NaN        12.54               9.81       60.1996  ...       82459.76          NaN           NaN     19810024.27      4603578.59           NaN
6   2021-09-30    19.9744        NaN        16.77                NaN       64.9432  ...            NaN          NaN           NaN             NaN             NaN           NaN
7   2021-12-31    24.3866        NaN        20.43              17.06       70.4047  ...     1532001.74          NaN           NaN     12658371.15     11882084.64           NaN
8   2022-03-31     6.3077        NaN         4.87                NaN       76.8292  ...            NaN          NaN           NaN             NaN             NaN           NaN
9   2022-06-30    12.4406        NaN         9.58               9.29       64.7451  ...     1494355.33          NaN           NaN      8007118.07      8756885.20           NaN
10  2022-09-30    18.3131        NaN        14.08                NaN       70.3834  ...            NaN          NaN           NaN             NaN             NaN           NaN
11  2022-12-31    27.2658        NaN        20.33              20.43       65.5313  ...       20767.10          NaN           NaN       470040.34       535684.00           NaN
12  2023-03-31     5.2958        NaN         4.27                NaN       70.7842  ...            NaN          NaN           NaN             NaN             NaN           NaN
13  2023-06-30    12.4060       9.39         9.40               8.98       73.3180  ...        7789.73          NaN           NaN       573856.69       492504.22           NaN
14  2023-09-30    15.5975      11.93        11.94                NaN       68.3042  ...            NaN          NaN           NaN             NaN             NaN           NaN
15  2023-12-31    20.2814        NaN        15.63              15.54       72.8419  ...        7783.96          NaN           NaN       409192.66       242692.92           NaN
16  2024-03-31     4.1494        NaN         3.52                NaN       76.8419  ...            NaN          NaN           NaN             NaN             NaN           NaN

[17 rows x 86 columns]
>>> print(a[['日期','加权净资产收益率(%)','股息发放率(%)','资产负债率(%)']])
            日期  加权净资产收益率(%)  股息发放率(%)  资产负债率(%)
0   2020-03-31         9.96    0.0075   20.7773
1   2020-06-30        16.38       NaN   20.7505
2   2020-09-30        24.17       NaN   21.8806
3   2020-12-31        31.03       NaN   21.1589
4   2021-03-31         9.16       NaN   23.2372
5   2021-06-30        21.89       NaN   29.0143
6   2021-09-30        29.71       NaN   28.5823
7   2021-12-31        35.97       NaN   28.7706
8   2022-03-31         7.35       NaN   26.0828
9   2022-06-30        15.09       NaN   30.4679
10  2022-09-30        22.56       NaN   30.1532
11  2022-12-31        32.49       NaN   27.4392
12  2023-03-31         7.42       NaN   25.1252
13  2023-06-30        15.82       NaN   23.0562
14  2023-09-30        19.83       NaN   24.1061
15  2023-12-31        26.04       NaN   20.9313
16  2024-03-31         5.53       NaN   21.0161
>>> filtered_df = a[a['日期'].str.contains('12-31')]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/caoyan/devops/getdata/.venv/lib/python3.10/site-packages/pandas/core/generic.py", line 6299, in __getattr__
    return object.__getattribute__(self, name)
  File "/home/caoyan/devops/getdata/.venv/lib/python3.10/site-packages/pandas/core/accessor.py", line 224, in __get__
    accessor_obj = self._accessor(obj)
  File "/home/caoyan/devops/getdata/.venv/lib/python3.10/site-packages/pandas/core/strings/accessor.py", line 191, in __init__
    self._inferred_dtype = self._validate(data)
  File "/home/caoyan/devops/getdata/.venv/lib/python3.10/site-packages/pandas/core/strings/accessor.py", line 245, in _validate
    raise AttributeError("Can only use .str accessor with string values!")
AttributeError: Can only use .str accessor with string values!. Did you mean: 'std'?
>>> print(type(a))
<class 'pandas.core.frame.DataFrame'>
>>> 
>>> 
>>> 
>>> a['日期'] = a['日期'].astype(str)
>>> 
>>> 
>>> 
>>> filtered_df = a[a['日期'].str.contains('12-31')]
>>> 
>>> 
>>> print(filtered_df)
            日期  摊薄每股收益(元)  加权每股收益(元)  每股收益_调整后(元)  扣除非经常性损益后的每股收益(元)  每股净资产_调整前(元)  ...  2-3年以内预付货款(元)  3年以内预付货款(元)  1年以内其它应收款(元)  1-2年以内其它应收款(元)  2-3年以内其它应收款(元)  3年以内其它应收款(元)
3   2020-12-31    18.5283        NaN        14.58              12.53       59.1069  ...       27378.92          NaN           NaN     14389231.37      6604288.16           NaN
7   2021-12-31    24.3866        NaN        20.43              17.06       70.4047  ...     1532001.74          NaN           NaN     12658371.15     11882084.64           NaN
11  2022-12-31    27.2658        NaN        20.33              20.43       65.5313  ...       20767.10          NaN           NaN       470040.34       535684.00           NaN
15  2023-12-31    20.2814        NaN        15.63              15.54       72.8419  ...        7783.96          NaN           NaN       409192.66       242692.92           NaN

[4 rows x 86 columns]
>>> print(filtered_df[['日期','加权净资产收益率(%)','股息发放率(%)','资产负债率(%)']])
            日期  加权净资产收益率(%)  股息发放率(%)  资产负债率(%)
3   2020-12-31        31.03       NaN   21.1589
7   2021-12-31        35.97       NaN   28.7706
11  2022-12-31        32.49       NaN   27.4392
15  2023-12-31        26.04       NaN   20.9313
>>> 
>>> 
>>> 
>>> print(filtered_df[['日期','加权净资产收益率(%)','资产负债率(%)']])
            日期  加权净资产收益率(%)  资产负债率(%)
3   2020-12-31        31.03   21.1589
7   2021-12-31        35.97   28.7706
11  2022-12-31        32.49   27.4392
15  2023-12-31        26.04   20.9313
>>> 
>>> 
>>> 
>>> a = ak.stock_financial_analysis_indicator(symbol="603444",start_year="2015")
>>>                                                                                                                                                                                                 
>>> 
>>> a['日期'] = a['日期'].astype(str)
>>> filtered_df = a[a['日期'].str.contains('12-31')]
>>> 
>>> 
>>> print(filtered_df[['日期','加权净资产收益率(%)','资产负债率(%)']])
            日期  加权净资产收益率(%)  资产负债率(%)
1   2015-12-31        43.74   20.7509
5   2016-12-31          NaN   22.3235
9   2017-12-31        29.58   21.8647
13  2018-12-31        28.05   21.8831
17  2019-12-31        28.14   21.3719
21  2020-12-31        31.03   21.1589
25  2021-12-31        35.97   28.7706
29  2022-12-31        32.49   27.4392
33  2023-12-31        26.04   20.9313
>>> b = ak.stock_financial_abstract_ths(symbol="603444",indicator="按年度")
>>> print(b)
     报告期       净利润 净利润同比增长率   扣非净利润 扣非净利润同比增长率   营业总收入 营业总收入同比增长率   基本每股收益  每股净资产 每股资本公积金 每股未分配利润  ...   净资产收益率 净资产收益率-摊薄   营业周期   存货周转率 存货周转天数 应收账款周转天数  流动比率  速动比率 保守速动比率  产权比率   资产负债率
0   2023    11.25亿  -22.98%  11.19亿    -23.79%  41.85亿    -19.02%  15.6300  61.96   19.45   40.00  ...   26.04%    25.21%  21.65   False  False    21.65  2.93  2.89   2.89  0.31  20.93%
1   2022    14.61亿   -0.52%  14.68亿     19.79%  51.68亿     11.88%  20.3300  55.36   18.57   34.46  ...   32.49%    36.72%  19.47   False  False    19.47  2.12  2.09   2.09  0.45  27.44%
2   2021    14.68亿   40.34%  12.26亿     36.24%  46.19亿     68.44%  20.4300  63.73   18.29   44.14  ...   35.97%    32.06%  19.08   False  False    19.08  2.38  2.34   2.34  0.45  28.77%
3   2020    10.46亿   29.32%   9.00亿     19.65%  27.42亿     26.35%  14.5800  52.92   15.83   35.70  ...   31.03%    27.52%  26.64   False  False    26.64  3.35  3.21   3.21  0.30  21.16%
4   2019     8.09亿   11.93%   7.52亿     15.46%  21.70亿     31.16%  11.2800  42.72   15.41   26.14  ...   28.14%    26.35%  43.44  415.88   0.87    42.57  3.05  2.90   2.90  0.30  21.37%
5   2018     7.23亿   18.58%   6.51亿     14.75%  16.55亿     14.91%  10.1200  40.44   14.98   24.75  ...   28.05%    24.87%  54.45  241.81   1.49    52.96  3.11  1.12   1.12  0.30  21.88%
6   2017     6.10亿    4.14%   5.68亿     -1.48%  14.40亿     10.31%   8.5300  32.09   14.23   17.32  ...   29.58%    26.49%  51.62  218.19   1.65    49.97  4.03  1.74   1.74  0.30  21.86%
7   2016     5.85亿  234.59%   5.76亿    244.19%  13.05亿    335.08%  10.9700  27.07   12.54   13.03  ...   78.90%    30.39%  33.15   False  False    33.15  3.76  3.73   3.73  0.31  22.32%
8   2015     1.75亿   -9.59%   1.67亿     -8.85%   3.00亿     -7.00%   3.2800   9.04    0.13    7.42  ...   43.74%    36.25%  27.34   False  False    27.34  4.31  4.28   4.28  0.27  20.75%
9   2014     1.94亿   22.85%   1.84亿     17.53%   3.23亿     16.64%   3.6300   6.32    0.12    4.70  ...   67.72%    57.35%  24.16   False  False    24.16  4.03  4.01   4.01  0.35  25.65%
10  2013     1.58亿   -0.97%   1.56亿     -5.74%   2.77亿     13.23%   2.8600   3.82    0.13    2.37  ...  101.85%    77.23%  27.00   False  False    27.00  2.91  2.90   2.90  0.58  36.57%
11  2012     1.59亿  380.57%   1.66亿     24.01%   2.44亿     21.74%   2.1200   3.05    0.79    0.81  ...   48.97%    81.28%  27.24   False  False    27.24  1.90  1.90   1.90  1.21  54.73%
12  2011  3310.25万    False   1.34亿      False   2.01亿      False   0.4400   4.20    2.15    0.88  ...   13.27%    10.51%  31.88   False  False    31.88  3.95  3.95   3.95  0.36  26.40%

[13 rows x 25 columns]
>>> print(b[['报告期','净资产收益率-摊薄','资产负债率']])
     报告期 净资产收益率-摊薄   资产负债率
0   2023    25.21%  20.93%
1   2022    36.72%  27.44%
2   2021    32.06%  28.77%
3   2020    27.52%  21.16%
4   2019    26.35%  21.37%
5   2018    24.87%  21.88%
6   2017    26.49%  21.86%
7   2016    30.39%  22.32%
8   2015    36.25%  20.75%
9   2014    57.35%  25.65%
10  2013    77.23%  36.57%
11  2012    81.28%  54.73%
12  2011    10.51%  26.40%
>>> bb = b[['报告期','净资产收益率-摊薄','资产负债率']]
>>> 
>>> 
>>> 
>>> bb['股票代码'] = '603444'
<stdin>:1: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
>>> bb['股票代码'] == '603444'
0     True
1     True
2     True
3     True
4     True
5     True
6     True
7     True
8     True
9     True
10    True
11    True
12    True
Name: 股票代码, dtype: bool
>>> bb['股票代码'] =bb '603444'
KeyboardInterrupt
>>> bb
     报告期 净资产收益率-摊薄   资产负债率    股票代码
0   2023    25.21%  20.93%  603444
1   2022    36.72%  27.44%  603444
2   2021    32.06%  28.77%  603444
3   2020    27.52%  21.16%  603444
4   2019    26.35%  21.37%  603444
5   2018    24.87%  21.88%  603444
6   2017    26.49%  21.86%  603444
7   2016    30.39%  22.32%  603444
8   2015    36.25%  20.75%  603444
9   2014    57.35%  25.65%  603444
10  2013    77.23%  36.57%  603444
11  2012    81.28%  54.73%  603444
12  2011    10.51%  26.40%  603444
>>> 
>>> 
>>> 
>>> bb = b[['报告期','净资产收益率-摊薄','资产负债率']].copy()
>>> 
>>> 
>>> bb['股票代码'] = '603444'
>>> 
>>> 
>>> bb
     报告期 净资产收益率-摊薄   资产负债率    股票代码
0   2023    25.21%  20.93%  603444
1   2022    36.72%  27.44%  603444
2   2021    32.06%  28.77%  603444
3   2020    27.52%  21.16%  603444
4   2019    26.35%  21.37%  603444
5   2018    24.87%  21.88%  603444
6   2017    26.49%  21.86%  603444
7   2016    30.39%  22.32%  603444
8   2015    36.25%  20.75%  603444
9   2014    57.35%  25.65%  603444
10  2013    77.23%  36.57%  603444
11  2012    81.28%  54.73%  603444
12  2011    10.51%  26.40%  603444


def remove_extremes(column):
    Q1 = column.quantile(0.10)
    Q3 = column.quantile(0.90)
    IQR = Q3 - Q1
    print(Q1,Q3,IQR)
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    return column[(column >= lower_bound) & (column <= upper_bound)]